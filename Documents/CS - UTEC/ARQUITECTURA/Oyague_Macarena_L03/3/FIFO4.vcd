$date
	Mon May 25 23:14:01 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module FIFO4_tb $end
$var wire 1 ! empty $end
$var wire 1 " full $end
$var wire 4 # dout [3:0] $end
$var reg 1 $ clr $end
$var reg 4 % din [3:0] $end
$var reg 1 & read $end
$var reg 1 ' write $end
$scope module fifo $end
$var wire 1 ( clk1 $end
$var wire 1 ) clk2 $end
$var wire 1 * clk3 $end
$var wire 1 + clk4 $end
$var wire 1 $ clr $end
$var wire 4 , din [3:0] $end
$var wire 1 ! empty $end
$var wire 1 " full $end
$var wire 1 & read $end
$var wire 1 ' write $end
$var wire 1 - qn4 $end
$var wire 1 . qn3 $end
$var wire 1 / qn2 $end
$var wire 1 0 qn1 $end
$var wire 1 1 q4 $end
$var wire 1 2 q3 $end
$var wire 1 3 q2 $end
$var wire 1 4 q1 $end
$var wire 1 5 q0 $end
$var wire 4 6 dout [3:0] $end
$var wire 4 7 d34 [3:0] $end
$var wire 4 8 d23 [3:0] $end
$var wire 4 9 d12 [3:0] $end
$scope module F0 $end
$var wire 1 : clr $end
$var wire 1 ; d $end
$var wire 1 ' we $end
$var reg 1 5 q $end
$upscope $end
$scope module R1 $end
$var wire 1 ( clk $end
$var wire 4 < d [3:0] $end
$var reg 4 = q [3:0] $end
$upscope $end
$scope module R2 $end
$var wire 1 ) clk $end
$var wire 4 > d [3:0] $end
$var reg 4 ? q [3:0] $end
$upscope $end
$scope module R3 $end
$var wire 1 * clk $end
$var wire 4 @ d [3:0] $end
$var reg 4 A q [3:0] $end
$upscope $end
$scope module R4 $end
$var wire 1 + clk $end
$var wire 4 B d [3:0] $end
$var reg 4 C q [3:0] $end
$upscope $end
$scope module RS1 $end
$var wire 1 $ clr $end
$var wire 1 ) r $end
$var wire 1 ( s $end
$var reg 1 4 q $end
$var reg 1 0 qn $end
$upscope $end
$scope module RS2 $end
$var wire 1 $ clr $end
$var wire 1 * r $end
$var wire 1 ) s $end
$var reg 1 3 q $end
$var reg 1 / qn $end
$upscope $end
$scope module RS3 $end
$var wire 1 $ clr $end
$var wire 1 + r $end
$var wire 1 * s $end
$var reg 1 2 q $end
$var reg 1 . qn $end
$upscope $end
$scope module RS4 $end
$var wire 1 $ clr $end
$var wire 1 & r $end
$var wire 1 + s $end
$var reg 1 1 q $end
$var reg 1 - qn $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
b100 <
0;
1:
bx 9
bx 8
bx 7
bx 6
x5
04
03
02
01
00
0/
0.
0-
b100 ,
0+
0*
0)
0(
0'
0&
b100 %
1$
bx #
z"
z!
$end
#10
1;
0:
0$
#20
15
1'
#40
0'
#60
1'
#80
0'
#100
1'
